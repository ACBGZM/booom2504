//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Settings/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""BaseCampGameplay"",
            ""id"": ""7f87d59a-f041-410e-9665-2cc61fcec4f3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""15e7cdbc-fe35-49fd-a955-7e7ad390882b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""52850602-aef9-4cae-84f9-a9b0ad26952c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e035310-c970-4cc2-9850-96bbd7e8443c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cce50520-87b4-4215-85cc-60179eed6d9f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""5264b517-066f-496c-8fea-b2685a570831"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c7ad57a1-8453-45d2-a325-90383fb77c16"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b74002c3-96f3-4d3e-a66e-9da912068e41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""be0c9680-953e-4f4e-889a-dfe80737594a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0eebd90e-d3a5-4e41-a22f-84c655b80f37"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""988cf6f2-59c3-48f2-969b-749373ef6c7a"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""DeliveryGameplay"",
            ""id"": ""87133316-efc3-4394-9887-22fc33b3d645"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""d01c9a1c-e561-4bd0-b65c-31d9209adf86"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""6265e4ad-a21f-4362-b101-b573a4e94993"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80241767-fe0c-4c9a-bc60-81b0a6572cc1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4559619f-8a7a-40b6-946c-658b59bf1b67"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1bd8fa7-3c13-4f82-91b6-c181f4a17280"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""bd9e7567-38cf-42c6-af3f-73466c67673a"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""MapActions"",
            ""id"": ""670bb53b-bee7-432f-8b07-b68581089748"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""e34a911b-4931-4b8e-b916-a848f44ba54a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""9758c66c-2187-4e36-9260-2468d765673c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce1c5d83-06ec-4e8c-b239-da23c9988d9d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fbbb964-aafc-4dd7-babc-1e2952a2b7f4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseCampGameplay
        m_BaseCampGameplay = asset.FindActionMap("BaseCampGameplay", throwIfNotFound: true);
        m_BaseCampGameplay_Move = m_BaseCampGameplay.FindAction("Move", throwIfNotFound: true);
        m_BaseCampGameplay_Interact = m_BaseCampGameplay.FindAction("Interact", throwIfNotFound: true);
        // DeliveryGameplay
        m_DeliveryGameplay = asset.FindActionMap("DeliveryGameplay", throwIfNotFound: true);
        m_DeliveryGameplay_Click = m_DeliveryGameplay.FindAction("Click", throwIfNotFound: true);
        m_DeliveryGameplay_Test = m_DeliveryGameplay.FindAction("Test", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        // MapActions
        m_MapActions = asset.FindActionMap("MapActions", throwIfNotFound: true);
        m_MapActions_Newaction = m_MapActions.FindAction("New action", throwIfNotFound: true);
        m_MapActions_MousePosition = m_MapActions.FindAction("MousePosition", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_BaseCampGameplay.enabled, "This will cause a leak and performance issues, InputActions.BaseCampGameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_DeliveryGameplay.enabled, "This will cause a leak and performance issues, InputActions.DeliveryGameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, InputActions.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MapActions.enabled, "This will cause a leak and performance issues, InputActions.MapActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseCampGameplay
    private readonly InputActionMap m_BaseCampGameplay;
    private List<IBaseCampGameplayActions> m_BaseCampGameplayActionsCallbackInterfaces = new List<IBaseCampGameplayActions>();
    private readonly InputAction m_BaseCampGameplay_Move;
    private readonly InputAction m_BaseCampGameplay_Interact;
    public struct BaseCampGameplayActions
    {
        private @InputActions m_Wrapper;
        public BaseCampGameplayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BaseCampGameplay_Move;
        public InputAction @Interact => m_Wrapper.m_BaseCampGameplay_Interact;
        public InputActionMap Get() { return m_Wrapper.m_BaseCampGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseCampGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IBaseCampGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseCampGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseCampGameplayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IBaseCampGameplayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IBaseCampGameplayActions instance)
        {
            if (m_Wrapper.m_BaseCampGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseCampGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseCampGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseCampGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseCampGameplayActions @BaseCampGameplay => new BaseCampGameplayActions(this);

    // DeliveryGameplay
    private readonly InputActionMap m_DeliveryGameplay;
    private List<IDeliveryGameplayActions> m_DeliveryGameplayActionsCallbackInterfaces = new List<IDeliveryGameplayActions>();
    private readonly InputAction m_DeliveryGameplay_Click;
    private readonly InputAction m_DeliveryGameplay_Test;
    public struct DeliveryGameplayActions
    {
        private @InputActions m_Wrapper;
        public DeliveryGameplayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_DeliveryGameplay_Click;
        public InputAction @Test => m_Wrapper.m_DeliveryGameplay_Test;
        public InputActionMap Get() { return m_Wrapper.m_DeliveryGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeliveryGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IDeliveryGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_DeliveryGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DeliveryGameplayActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
        }

        private void UnregisterCallbacks(IDeliveryGameplayActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
        }

        public void RemoveCallbacks(IDeliveryGameplayActions instance)
        {
            if (m_Wrapper.m_DeliveryGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDeliveryGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_DeliveryGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DeliveryGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DeliveryGameplayActions @DeliveryGameplay => new DeliveryGameplayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    public struct UIActions
    {
        private @InputActions m_Wrapper;
        public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // MapActions
    private readonly InputActionMap m_MapActions;
    private List<IMapActionsActions> m_MapActionsActionsCallbackInterfaces = new List<IMapActionsActions>();
    private readonly InputAction m_MapActions_Newaction;
    private readonly InputAction m_MapActions_MousePosition;
    public struct MapActionsActions
    {
        private @InputActions m_Wrapper;
        public MapActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MapActions_Newaction;
        public InputAction @MousePosition => m_Wrapper.m_MapActions_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MapActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMapActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MapActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapActionsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IMapActionsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IMapActionsActions instance)
        {
            if (m_Wrapper.m_MapActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MapActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapActionsActions @MapActions => new MapActionsActions(this);
    public interface IBaseCampGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IDeliveryGameplayActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
    }
    public interface IMapActionsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
