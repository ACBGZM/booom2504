using System; using System.Collections.Generic; using System.Linq; using TMPro; using UnityEngine; using UnityEngine.UI;   public class OrderManager : Singleton<OrderManager> {     public event Action<OrderSO> OnChatWindowOpen;     [SerializeField] private List<OrderSO> _allOrders;     [SerializeField] private Transform _orderTemplatePrefab;     [SerializeField] private Transform _myOrderTemplatePrefab;     [SerializeField] private Transform _availableOrderContainer;     [SerializeField] private Transform _acceptedOrderContainer;      private List<OrderSO> _availableOrders; // 鍙敤璁㈠崟     private List<OrderSO> _acceptedOrders;  // 宸叉帴璁㈠崟鍒楄〃     //已接订单与目的节点编号映射表 TODO: 待持久化     private Dictionary<OrderSO, int> acceptedOrdersNode;       protected override void init()
    {
        _availableOrders = new List<OrderSO>();         _acceptedOrders = new List<OrderSO>();         acceptedOrdersNode = new Dictionary<OrderSO, int>();
    }



    private void Start() => SortOrders();      private void OnEnable()     {         EventHandlerManager.updateArriveDistAndTime += OnUpdateArriveDistAndTime;         EventHandlerManager.checkNodeOrder += OnCheckNodeOrder;     }     private void OnDisable()     {         EventHandlerManager.updateArriveDistAndTime -= OnUpdateArriveDistAndTime;         EventHandlerManager.checkNodeOrder -= OnCheckNodeOrder;     }     // 鎸夎窛绂绘帓搴?     public void SortOrders() {         _availableOrders.Clear();         var sortedOrders = _allOrders.OrderBy(order => order.orderDistance).ToList();         GenerateOrder(sortedOrders);     }      // 璁㈠崟浠诲姟鐢熸垚鏂规硶     private void GenerateOrder(List<OrderSO> availableOrder) {                            foreach (var order in availableOrder) {             var orderItem = GenerateAvailableOrder(                 orderNameText: order.orderTitle,                 customerNameText: order.customerSO.customerName,                 distanceText: $"{order.orderDistance:F1}km",                 addressText: order.customerSO.customerAddress,                 range: order.range,                 profileImage: order.customerSO.customerProfile                          );             Button btn = orderItem.GetComponentInChildren<Button>();             btn.onClick.RemoveAllListeners();             btn.onClick.AddListener(() => OnAcceptOrder(order, orderItem));         }     }      /// <summary>     ///      /// </summary>     /// <param name="orderNameText">璁㈠崟鏃堕棿</param>     /// <param name="customerNameText">椤惧鍚嶇О</param>     /// <param name="distanceText">璺濈</param>     /// <param name="addressText">椤惧鍦板潃</param>     /// <param name="profileImage">椤惧澶村儚</param>     public Transform GenerateAvailableOrder(string orderNameText, string customerNameText, string distanceText, string addressText, int range, Sprite profileImage) {                            Transform order = Instantiate(_orderTemplatePrefab, _availableOrderContainer);         TextMeshProUGUI m_nameText = order.transform.Find("OrderName/NameText").gameObject.GetComponent<TextMeshProUGUI>();         TextMeshProUGUI m_customerNameTex = order.transform.Find("OrderInformation/CustomerNameText").gameObject.GetComponent<TextMeshProUGUI>();         TextMeshProUGUI m_distanceText = order.transform.Find("OrderInformation/DistanceText").gameObject.GetComponent<TextMeshProUGUI>();         TextMeshProUGUI m_addressText = order.transform.Find("OrderInformation/AddressText").gameObject.GetComponent<TextMeshProUGUI>();         Image m_profileImage = order.transform.Find("ProfileImage").gameObject.GetComponent<Image>();          m_nameText.text = orderNameText;         m_profileImage.sprite = profileImage;         m_customerNameTex.text = customerNameText;                 m_distanceText.text = distanceText;         m_addressText.text = addressText;         return order;     }      public void GenerateAcceptOrder() {         for (int i = 0; i < _acceptedOrderContainer.childCount; i++) {             Destroy(_acceptedOrderContainer.GetChild(i).gameObject);         }          foreach (var orderSO in _acceptedOrders) {             Transform order = Instantiate(_myOrderTemplatePrefab, _acceptedOrderContainer);             //TextMeshProUGUI m_nameText = order.transform.Find("OrderTitle/Text").gameObject.GetComponent<TextMeshProUGUI>();             Image m_profileImage = order.transform.Find("ProfileImage").gameObject.GetComponent<Image>();             Image m_rewardImage = order.transform.Find("Reward/Image").gameObject.GetComponent<Image>();             GameObject m_reward = order.transform.Find("Reward").gameObject;              TextMeshProUGUI m_orderTitleText = order.transform.Find("OrderInformation/OrderTitle").gameObject.GetComponent<TextMeshProUGUI>();             TextMeshProUGUI m_orderAddressText = order.transform.Find("OrderInformation/OrderAddress").gameObject.GetComponent<TextMeshProUGUI>();             TextMeshProUGUI m_customerAddressNameText = order.transform.Find("OrderInformation/CustomerAddressName").gameObject.GetComponent<TextMeshProUGUI>();             TextMeshProUGUI m_customerAddressText = order.transform.Find("OrderInformation/CustomerAddress").gameObject.GetComponent<TextMeshProUGUI>();             TextMeshProUGUI m_BubbleText = order.transform.Find("Bubble/Text").gameObject.GetComponent<TextMeshProUGUI>();              m_profileImage.sprite = orderSO.customerSO.customerProfile;             m_orderTitleText.text = orderSO.orderTitle;             m_orderAddressText.text = orderSO.orderAddress;             m_customerAddressNameText.text = orderSO.customerSO.customerAddressName;             m_customerAddressText.text = orderSO.customerSO.customerAddress;             m_BubbleText.text = orderSO.bubble;             for (int i = 0; i < orderSO.reward; i++) {                 Instantiate(m_rewardImage, m_reward.transform);             }              Button btn = order.GetComponentInChildren<Button>();             btn.onClick.RemoveAllListeners();             btn.onClick.AddListener(() => OnChatWithCustormer(orderSO));         }     }      private void OnChatWithCustormer(OrderSO order) {         OnChatWindowOpen?.Invoke(order);     }      public List<OrderSO> GetAcceptedOrderSO() {         return _acceptedOrders;     }        private void OnAcceptOrder(OrderSO order, Transform orderItem) {         if (_acceptedOrders.Count >= GameplaySettings.m_max_accepted_orders) {                          return;         }         _availableOrders.Remove(order);         Destroy(orderItem.gameObject);         // 初始化订单历史记录         order.chatHistory = new List<ChatFragment>();         // 获取目的地节点         // SO文件待填       //  int nodeIdx;         //MapDataManager.Instance.nodeAddress.TryGetValue(order.customerSO.customerAddress,out nodeIdx);          //GameManager.Instance.NodeGraphManager.ShowTargetNode(nodeIdx,true);         // 添加到已接列表         _acceptedOrders.Add(order);         // 添加order进节点映射表       //  acceptedOrdersNode.Add(order, nodeIdx);         GenerateAcceptOrder();     }      private void OnCompleteOrder(OrderSO order, Transform orderItem) {         //          _acceptedOrders.Remove(order);         //          acceptedOrdersNode.Remove(order);                  Destroy(orderItem.gameObject);          // 结束展示地图目标节点         //int nodeIdx;         //MapDataManager.Instance.nodeAddress.TryGetValue(order.customerSO.customerAddress,out nodeIdx);         //GameManager.Instance.NodeGraphManager.ShowTargetNode(nodeIdx, false);          // 将订单重新加入可用列表         _availableOrders.Add(order);     }     // 更新订单预计到达时间与距离(外卖员当前所在节点位置更新调用)      private void OnUpdateArriveDistAndTime(int currentNode,int speed)     {         foreach (OrderSO order in _availableOrders)         {             float dist = GameManager.Instance.NodeGraphManager.GetDistance(currentNode, MapDataManager.Instance.nodeAddress[order.orderAddress]);             order.orderDistance = $"{dist:F1}km";             order.time = dist / speed;         }         foreach (OrderSO order in _acceptedOrders)         {             float dist = GameManager.Instance.NodeGraphManager.GetDistance(currentNode, MapDataManager.Instance.nodeAddress[order.orderAddress]);             order.time = dist / speed;             order.orderDistance = $"{dist:F1}km";         }     }     // 判断是否有当前节点的订单     private bool OnCheckNodeOrder(int nodeIdx)
    {         return (acceptedOrdersNode.ContainsValue(nodeIdx));
    } } 